Q1.
    mpentry.S在切换为32位保护模式时，对目标地址进行了MPBOOTPHYS操作，从字面上可以看出是做了一步到物理地址转换的操作。进一步观察boot.asm以及kernel.asm，可以看出因为mpentry.S中的代码被加载到了kernel中，代码的实际位置在KERNBASE上的某处，此处start32地址为0xf010634c，当AP启动时它位于16位的实模式，无法正确访问到start32这段代码，所以boot_ap函数中先将他加载到了较低的一段物理内存中，这里的MPBOOTPHYS即为取该物理地址。如果不经过这样的转换，AP无法执行到start32中的代码，也就无法启动。

Q2.
    比如jos在启动多核的时候，将汇编代码加载到内核栈上，此时不能加锁，多个CPU同时进行会破坏一致性。

Q3.
    因为每个进程的内核地址空间是一样的，在lcr3前后，指向内核地址空间的指针e始终是有效的。